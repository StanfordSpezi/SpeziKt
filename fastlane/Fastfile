#
# This source file is part of the Stanford Spezi open-source project
#
# SPDX-FileCopyrightText: 2024 Stanford University
#
# SPDX-License-Identifier: MIT
#

default_platform(:android)

APP_CONFIG = {
  default_environment: "staging",
  default_application_id: "edu.stanford.bdh.engagehf",
  default_version_name: "2.0.0",
  signing: {
    store_file: "keystore.jks",
    store_password: ENV['KEY_PASSWORD'],
    key_alias: ENV['KEY_ALIAS'],
    key_password: ENV['KEY_PASSWORD']
  },
  json_key_data: ENV['SERVICE_ACCOUNT_JSON_KEY']
}.freeze

platform :android do
  desc "Runs all unit tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Runs all UI tests"
  lane :connectedCheck do
    gradle(task: "connectedCheck")
  end

  desc "Deploy a new version to the Google Play (Internal)"
  lane :internal do |options|
    environment = options[:environment].to_s.strip.empty? ? APP_CONFIG[:default_environment] : options[:environment]
    applicationid = options[:applicationid].to_s.strip.empty? ? APP_CONFIG[:default_application_id] : options[:applicationid]
    version_name = options[:versionname].to_s.strip.empty? ? APP_CONFIG[:default_version_name] : options[:versionname]

    UI.message("Using environment: #{environment}")
    UI.message("Using application id: #{applicationid}")
    UI.message("Using version name: #{version_name}")

    def fetch_max_version_code(track, applicationid)
      version_codes = google_play_track_version_codes(
        package_name: applicationid,
        track: track,
        json_key_data: APP_CONFIG[:json_key_data]
      )

      if version_codes.nil? || version_codes.empty?
        0
      else
        version_codes.max
      end
    end

    production_version_code = fetch_max_version_code('production', applicationid)
    internal_version_code = fetch_max_version_code('internal', applicationid)

    previous_version_code = [production_version_code, internal_version_code].max
    current_version_code = previous_version_code + 1

    UI.message("Previous version code: #{previous_version_code}")
    UI.message("Current version code: #{current_version_code}")

    gradle(
      task: "clean bundle",
      build_type: 'Release',
      properties: {
        "android.injected.application.id" => applicationid,
        "android.injected.version.code" => current_version_code,
        "android.injected.version.name" => version_name,
        "android.injected.signing.store.file" => APP_CONFIG[:signing][:store_file],
        "android.injected.signing.store.password" => APP_CONFIG[:signing][:store_password],
        "android.injected.signing.key.alias" => APP_CONFIG[:signing][:key_alias],
        "android.injected.signing.key.password" => APP_CONFIG[:signing][:key_password],
      }
    )

    upload_to_play_store(
      package_name: applicationid,
      track: environment == "production" ? 'production' : 'internal',
      json_key_data: APP_CONFIG[:json_key_data]
    )
  end
end
